#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256
#define MAX_LENGTH  65536

int clear_loop(char *p);
int only_loop(char *p);
int check_operator(char *p);
int count(char *p);
int blank_loop(char *p);
int scan_loop(char *p);
int mul_loop(char *p,int value);

static dasm_State *state;

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x64 <inputfile>");

	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;
	int value;
	

	// Function prologue.
	|  push PTR
	|  mov  PTR, rdi      // rdi store 1st argument

	for (char *p = read_file(argv[1]); *p; p++) {
		switch (*p) {
		case '>':
		case '<':
			value = 0;
                        while(*p && (*p=='>'||*p=='<'))
                         {
                                 if(*p=='>')
                                         value++;
                                 else    
                                         value--;
                                 p++;
                         }
                         p--;
	                     | add PTR,value
			break;
		case '+':
		case '-':
			value = 0;
			while(*p && (*p=='+'||*p=='-'))
			{
				if(*p=='+')
					value++;
				else
					value--;
				p++;
			}
			p--;
			| add byte [PTR],value
			break;
		case '.':
			|  movzx edi, byte [PTR]
			|  callp putchar
			break;
		case ',':
			|  callp getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if(clear_loop(p))
			{
				|  mov byte [PTR],0
				p+=2;	
			}
			else if(blank_loop(p))
				p+=1;	
			else if ((value=only_loop(p))&&check_operator(p)&&!scan_loop(p))
			{
				p++;
				mul_loop(p,value);
				p+=value;
			}
			else
			{
			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
			maxpc += 2;
			*top++ = maxpc;
			dasm_growpc(&state, maxpc);
			|  cmp  byte [PTR], 0
			|  je   =>(maxpc-2)
			|=>(maxpc-1):
			}
			break;
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  pop  PTR
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}

int clear_loop(char *p)
{
	if(*(p+1) == '-'&& *(p+2)==']')		
		return 1;
		
	return 0;		
}
int blank_loop(char *p)
{
	if(*(p+1)==']')
		return 1;
		
	return 0;
}

int only_loop(char *p)
{	
	int num = 0;
	p++;
	while(*p!=']')
	{
		if(*p=='[')
			return 0;
		num++;
		p++;
	}
	return num;	
}

int check_operator(char *p)
{

	int right=0,left=0;
	
	while(*(++p)!=']')
	{
		if(*p=='.'||*p==',')
			return 0;
		if(*p=='>')
			right++;
		if(*p=='<')
			left++;
	}
	
	if(right==left)
		return 1;
	else
		return 0;
}
int count(char *p)
{
	char tmp=*p;
	int num=1;
	
	while(*(++p)==tmp)
		num++;
		
	return num;
}
int scan_loop(char *p)
{
	char ch = *(p+1);
	
	while(*(++p)!=']')
	{
		if(*p!=ch)
			return 0;
	}
	return 1;
}

int mul_loop(char *p,int value)
{

	int poi=0,cnt;
	int x[30000]={0},val[30000]={0},deno=0,j=0;

	while(*p!=']')
	{
		switch(*p)
		{						
			case '>':
				cnt=count(p);
				poi += cnt;
				p+=cnt;
				break;
				
			case '<':
				cnt=count(p);
				poi -= cnt;
				p+=cnt;
				break;
				
			case '+':
				cnt=count(p);
				if(poi)
				{			
					x[j]=poi;
					val[j]+=cnt;
					j++;
				}
				else
					deno+=cnt;
				p+=cnt;					
				break;
	
			case '-':
				cnt=count(p);
				if(poi)
				{
					x[j]=poi;
					val[j]-=cnt;
					j++;
				}
				else 
					deno-=cnt;
				p+=cnt;
				break;

			default:
				p++;
				break;
		}
		
	}
	
	deno *=-1;
	
		|  mov al,byte [PTR]
		
	if(deno!=1)
	{
		|  cbw
		|  mov cl,deno
		|  idiv cl
	}	
		for(int i=0;i<j;i++)
		{	
			if(val[i]>0)
				for(int k=0;k<val[i];k++)
					|  add byte [PTR+x[i]],al
			else
			{
				val[i]*=-1;
				for(int k=0;k<val[i];k++)
					|  sub byte [PTR+x[i]],al
			
			}
		}
	|  mov byte [PTR],0
				
	return 0;
}

